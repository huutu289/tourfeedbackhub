/**
 * @fileoverview Firestore Security Rules for the Tour Insights Hub application.
 *
 * Core Philosophy:
 * Public read access for all collections.
 * Write access is open for development - should be restricted in production.
 *
 * NOTE: App Check enforcement is handled at the Firebase Console level,
 * NOT in security rules. To enable App Check:
 * 1. Go to Firebase Console â†’ App Check
 * 2. Find "Cloud Firestore" and click "Enforce"
 * 3. All requests without valid App Check tokens will be rejected
 *
 * Data Structure:
 * - /site_settings: Stores global site settings.
 * - /tour_types: Stores tour types.
 * - /tours: Stores tour information.
 * - /feedback: Stores user feedback.
 */
rules_version = '2';
service cloud.firestore {
  function isAdmin() {
    return request.auth != null && (
      request.auth.token.admin == true ||
      request.auth.token.role == 'admin'
    );
  }

  function canWriteAdmin() {
    return isAdmin();
  }

  match /databases/{database}/documents {

    match /navigationMenus/{menuId} {
      allow read: if true;
      allow write: if canWriteAdmin();

      match /items/{itemId} {
        allow read: if true;
        allow write: if canWriteAdmin();
      }
    }

    match /siteSettings/{siteSettingsId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /tourTypes/{tourTypeId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /tours/{tourId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /feedback/{feedbackId} {
      allow read, write: if true;
    }

    match /stories/{storyId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /reviews/{reviewId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /guides/{guideId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /languages/{languageId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /provinces/{provinceId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /nationalities/{nationalityId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /siteContentSlides/{slideId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    // CMS Collections
    match /posts/{postId} {
      // Allow read for: published posts (public) OR admin users (for draft/all posts)
      allow read: if request.auth != null || (resource != null && resource.data.status == 'published');
      // Temporarily relaxed for development - restore canWriteAdmin() in production
      allow create: if request.auth != null;
      allow delete: if request.auth != null;

      // Allow update for authenticated users (admin check temporarily relaxed for dev)
      // In production, restore: canWriteAdmin() || (auth and authorId check)
      allow update: if request.auth != null;

      // Versions subcollection - read only from client, write only from Cloud Functions
      match /versions/{versionId} {
        // Allow authenticated users to read versions (admin check temporarily relaxed for dev)
        allow read: if request.auth != null;
        allow write: if false; // Only Cloud Functions can write versions
      }
    }

    // Audit logs - only Cloud Functions can write
    match /audit_logs/{logId} {
      allow read: if canWriteAdmin();
      allow write: if false; // Only Cloud Functions can write logs
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /tags/{tagId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /media/{mediaId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if canWriteAdmin() ||
        (request.auth != null && resource.data.uploadedBy == request.auth.uid);
    }

    match /comments/{commentId} {
      allow read: if resource.data.status == 'approved' || canWriteAdmin();
      allow create: if true; // Anyone can submit comments (they start as pending)
      allow update, delete: if canWriteAdmin();
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if canWriteAdmin();
      allow update: if canWriteAdmin() || request.auth.uid == userId;
      allow delete: if canWriteAdmin();
    }

    match /analytics/{docId} {
      allow read: if canWriteAdmin();
      allow write: if canWriteAdmin();
    }

    match /themeSettings/{settingsId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }

    match /widgets/{widgetId} {
      allow read: if true;
      allow write: if canWriteAdmin();
    }
  }
}
