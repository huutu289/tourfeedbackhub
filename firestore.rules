/**
 * @file Firestore Security Rules for TourFeedbackHub.
 *
 * @core_philosophy This ruleset uses App Check and admin authentication to protect all collections.
 *  All write operations require a valid App Check token and admin authentication.
 *  Most collections are publicly readable, except admin-only collections.
 *
 * @data_structure
 *  - `/site_settings/{siteSettingsId}`: Stores global site settings.
 *  - `/tour_types/{tourTypeId}`: Stores tour types.
 *  - `/tours/{tourId}`: Stores tour information.
 *  - `/feedback/{feedbackId}`: Stores user feedback.
 *  - `/admins/{userId}`: Stores admin user information (admin-only).
 *
 * @key_security_decisions
 *  - Admin operations require custom claims (admin: true).
 *  - All write operations are protected by App Check and admin auth.
 *  - Public read access for most collections.
 *  - Admin collection is read/write only by admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             request.auth.token.admin == true;
    }

    // Helper function to check if request has valid App Check token
    function hasValidAppCheck() {
      return request.app != null;
    }

    /**
     * @description Controls access to the /admins collection.
     * @path /admins/{userId}
     * @allow (read, write) Only authenticated admin users.
     * @principle Protects admin user data and roles.
     */
    match /admins/{userId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Controls access to the /site_settings collection.
     * @path /site_settings/{siteSettingsId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Requires admin authentication.
     * @principle Protects site settings from unauthorized modifications.
     */
    match /site_settings/{siteSettingsId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the /tour_types collection.
     * @path /tour_types/{tourTypeId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Requires admin authentication.
     * @principle Protects tour types from unauthorized modifications.
     */
    match /tour_types/{tourTypeId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the /tours collection.
     * @path /tours/{tourId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Requires admin authentication.
     * @principle Protects tours from unauthorized modifications.
     */
    match /tours/{tourId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the /feedback collection.
     * @path /feedback/{feedbackId}
     * @allow (read) Admins can read all feedback to moderate.
     * @allow (create) Blocked - must use Cloud Functions with App Check.
     * @allow (update, delete) Requires admin authentication.
     * @principle All feedback submission goes through Cloud Functions for security.
     */
    match /feedback/{feedbackId} {
      allow read: if isAdmin();
      allow create: if false; // Must use Cloud Functions
      allow update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the /reviews collection (public approved reviews).
     * @path /reviews/{reviewId}
     * @allow (read) Public read access to approved reviews.
     * @allow (create, update, delete) Only Cloud Functions can manage reviews.
     * @principle Reviews are created by Cloud Functions when feedback is approved.
     */
    match /reviews/{reviewId} {
      allow read: if true;
      allow create, update, delete: if false; // Only Cloud Functions
    }
  }
}