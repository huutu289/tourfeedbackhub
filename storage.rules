/**
 * @file Firebase Storage Security Rules for TourFeedbackHub
 *
 * @structure
 *  - /public/** : Publicly readable content (hero images, tours, reviews)
 *  - /uploads/tmp/** : Temporary upload storage (private, auto-cleanup via signed URLs)
 *  - /private/** : Admin-only content
 *
 * @security
 *  - Public content is readable by anyone.
 *  - Write operations to public folders are restricted to backend processes (Cloud Functions).
 *  - Temporary uploads are private and only writable via short-lived signed URLs.
 *  - File size and type validation should be handled by the Cloud Function generating the URL.
 */

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if user is admin by checking Firestore
    function isAdmin() {
      return exists(/databases/(default)/documents/admins/$(request.auth.uid));
    }

    // Publicly readable content. Writable only by service accounts (Cloud Functions).
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Managed by backend functions
    }
    
    // Approved tour images. Publicly readable, managed by admin Cloud Functions.
    match /tours/{tourId}/{fileName} {
      allow read: if true;
      allow write: if isAdmin(); // Allow admins to upload directly
    }

    // Temporary upload storage for feedback photos.
    // Files are uploaded via signed URLs generated by the 'feedback-submit' Cloud Function.
    // No direct client access is allowed by these rules.
    match /uploads/tmp/{feedbackId}/{fileName} {
      allow read, write: if false;
    }
    
    // Private content, only accessible by authenticated admins.
    match /private/{allPaths=**} {
      allow read, write: if isAdmin();
    }

    // Deny all other paths by default.
    // This is a security best practice. If a path is not matched above, it's denied.
    // NOTE: This was commented out because it was causing issues. The default behavior is to deny.
    // match /{allPaths=**} {
    //   allow read, write: if false;
    // }
  }
}
